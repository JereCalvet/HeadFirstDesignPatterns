Adapter pattern:
    Converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.

Command pattern: 
    Encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue, or log requests, and support undoable operations.	

Singleton pattern:
    Ensures a class has only one instance, and provides a global point of access to it.

Abstract factory pattern:
    Provides an interface for creating families of related or dependent objects without specifying thier concrete classes.

Factory method pattern:
    Defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
    
Decorator pattern:
    Attaches additional responsabilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionaloty.

Strategy pattern:
    Defines a family of algorithms, encapsulates each one, and makes them, interchangeable. Strategy lets the algorithm vary independently from clients that use it.

Observer pattern:
    Defines a one-to-many dependency between objects so that when one object change state, all of its dependents are notified and updated automatically.
    
Disign principles:
    *Identify the aspects of your application that vary and separate them from what stays the same. Page 9
    *Program to an interface, not an implementation. Page 11
    *Favor composition over inheritance. Page 23
    *Strive for loosely couple designs between objects that interact. Page 53
    *Classes should be open for extension but closed for modification. Page 86
    *Dependancy invention principly: Depend upon abstractions. Do not depend upon contrete classes. Page 139	
    